@using ItemDBEditor.Data
@inject ItemService ItemsDB
@inject NavigationManager NavManager

@if (items != null) {
    <a href="/create" class="btn btn-primary">Create new Item</a>
    <hr>
} 
<h1>Items</h1>

@if (!FileAvailable) {
    <p>Please select your items.db!</p>
    <BlazorInputFile.InputFile OnChange="FileSelected" />
    @if(file != null) {
        <button @onclick="Process">Load database</button>
    }
} else if (items == null) {
    <p><em>Loading items...</em></p>
} else {
    <table class="table">
        <thead>
            <tr>
                <th>Code</th>
                <th>Name</th>
                <th>Prefab</th>
                <th>Weight</th>
                <th>Grist</th>
                <th>Strifekind</th>
                <th>Weaponsprite</th>
                <th>CustomMade</th>
                <th>Icon</th>
                <th>Description</th>
                <th>Tags</th>
                <th>Speed</th>
                <th>Spawn</th>
                <th />
                <th />
            </tr>
        </thead>
        <tbody>
            @foreach (var item in items)
            {
                <tr>
                    <td>@item.Code</td>
                    <td>@item.Name</td>
                    <td>@item.Prefab</td>
                    <td>@item.Weight</td>
                    <td>@item.Grist</td>
                    <td>@item.Strifekind</td>
                    <td>@item.Weaponsprite</td>
                    <td>@item.CustomMade</td>
                    <td>@item.Icon</td>
                    <td>@item.Description</td>
                    <td>@string.Join(", ", item.Tags)</td>
                    <td>@item.Speed</td>
                    <td>@item.Spawn</td>
                    <td><a name="edit-item-btn" id="edit-item-@item.Code" class="btn btn-primary" href="/edit/@item.Code" role="button">Edit</a></td>
                    <td><button class="btn btn-primary" @onclick="@(() => DeleteItem(@item.Code))">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private List<Item> items;
    private IFileListEntry file;
    private bool FileAvailable {
        get {
            return System.IO.File.Exists("items.db");
        }
    }

    protected override async Task OnInitializedAsync() {
        if(FileAvailable) {
            items = await ItemsDB.GetItems();
        }
    }

    private async void DeleteItem(string code) {
        await ItemsDB.DeleteItem(code);
        NavManager.NavigateTo("/", true);
    }

    private void FileSelected(IFileListEntry[] files) {
        file = files.FirstOrDefault();
    }

    private async Task Process() {
        var fs = System.IO.File.Create("items.db");
        await file.Data.CopyToAsync(fs);
        fs.Close();
        items = await ItemsDB.GetItems();
    }
}