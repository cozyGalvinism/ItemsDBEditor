@page "/edit/{Code}"

@using ItemDBEditor.Data
@inject ItemService ItemsDB
@inject NavigationManager NavManager

<form action="javascript:void(0);">
    @if (item == null) {
        <p>Loading...</p>
    }else {

    <div class="form-group">
        <label for="field-Name"><b>Code</b></label>
        <input type="text" name="form-control" id="field-Name" class="form-control" placeholder="" @bind="@Code" readonly="readonly">
    </div>
    <div class="form-group">
		<label for="field-Name"><b>Name</b><span class="validation-message">*</span></label>
		<input type="text" name="form-control" id="field-Name" class="form-control" placeholder="" @bind="@Name" @oninput="@((e) => { Name=(string)e.Value;})" required>
	</div>

	<div class="form-group">
		<label for="field-Prefab"><b>Prefab</b><span class="validation-message">*</span></label>
		<input type="text" name="form-control" id="field-Prefab" class="form-control" placeholder="" @bind="@Prefab" @oninput="@((e) => { Prefab=(string)e.Value;})" required>
	</div>

	<div class="form-group">
		<label for="field-Weight"><b>Weight</b><span class="validation-message">*</span></label>
		<input type="number" name="form-control" id="field-Weight" class="form-control" placeholder="" @bind="@Weight" required>
	</div>

	<div class="form-group">
		<label for="field-Grist"><b>Grist</b><span class="validation-message">*</span></label>
		<input type="number" name="form-control" id="field-Grist" class="form-control" placeholder="" @bind="@Grist" @oninput="@((e) => { Grist=(long)e.Value;})" required>
	</div>

	<div class="form-group">
		<label for="field-Strifekind"><b>Strifekind</b></label>
		<input type="text" name="form-control" id="field-Strifekind" class="form-control" placeholder="" @bind="@Strifekind" @oninput="@((e) => { Strifekind=(string)e.Value;})">
	</div>

	<div class="form-group">
		<label for="field-Weaponsprite"><b>Weaponsprite</b></label>
		<input type="text" name="form-control" id="field-Weaponsprite" class="form-control" placeholder="" @bind="@Weaponsprite" @oninput="@((e) => { Weaponsprite=(string)e.Value;})">
	</div>

	<div class="form-check">
        <input type="checkbox" name="form-control" id="field-CustomMade" class="form-check-input" @bind="@CustomMade">
		<label for="field-CustomMade" class="form-check-label"><b>CustomMade</b></label>
	</div>

	<div class="form-group">
		<label for="field-Icon"><b>Icon</b><span class="validation-message">*</span></label>
		<input type="text" name="form-control" id="field-Icon" class="form-control" placeholder="" @bind="@Icon" @oninput="@((e) => { Icon=(string)e.Value;})" required>
	</div>

	<div class="form-group">
		<label for="field-Description"><b>Description</b></label>
		<textarea name="form-control" id="field-Description" rows="6" class="form-control" placeholder="" @bind="@Description" @oninput="@((e) => { Description=(string)e.Value;})"></textarea>
	</div>

	<div class="form-group">
		<label for="field-Tags"><b>Tags</b></label>
		<input type="text" name="form-control" id="field-Tags" class="form-control" placeholder="" @bind="@Tags" @oninput="@((e) => { Tags=(string)e.Value;})">
	</div>

	<div class="form-group">
		<label for="field-Speed"><b>Speed</b><span class="validation-message">*</span></label>
		<input type="number" name="form-control" id="field-Speed" class="form-control" placeholder="" @bind="@Speed" @oninput="@((e) => { Speed=(long)e.Value;})" required>
	</div>
        
    <div class="form-check">
        <input type="checkbox" name="form-control" id="field-Spawn" class="form-check-input" placeholder="" @bind="@Spawn">
        <label for="field-Spawn" class="form-check-label"><b>Spawn</b></label>
    </div>
    <span class="validation-message">* Field is required</span>
    <br/>
    <button type="submit" class="btn btn-primary" @onclick="SaveItem">Save</button>
    }
</form>

@code {
    [Parameter]
    public string Code { get; set; }
    public string Name { get; set; }
    public string Prefab { get; set; }
    public double Weight { get; set; }
    public long Grist { get; set; }
    public string Strifekind { get; set; }
    public string Weaponsprite { get; set; }
    public bool CustomMade { get; set; }
    public string Icon { get; set; }
    public string Description { get; set; }
    public string Tags { get; set; }
    public long Speed { get; set; }
    public bool Spawn { get; set; }
    private Item item;

    protected override async Task OnInitializedAsync()
    {
        item = await ItemsDB.GetItem(Code);
        Name = item.Name;
        Prefab = item.Prefab;
        Weight = item.Weight;
        Grist = item.Grist;
        Strifekind = item.Strifekind;
        Weaponsprite = item.Weaponsprite;
        CustomMade = item.CustomMade;
        Icon = item.Icon;
        Description = item.Description;
        Tags = string.Join(", ", item.Tags);
        Speed = item.Speed;
        Spawn = item.Spawn;
    }

    private async void SaveItem() {
        if (string.IsNullOrEmpty(Name) || string.IsNullOrEmpty(Prefab) || string.IsNullOrEmpty(Icon)) return;
        item.Name = Name;
        item.Prefab = Prefab;
        item.Weight = Weight;
        item.Grist = Grist;
        item.Strifekind = Strifekind;
        item.Weaponsprite = Weaponsprite;
        item.CustomMade = CustomMade;
        item.Icon = Icon;
        item.Description = Description;
        item.Tags = Tags.Split(",").Select(t => t.Trim()).ToList();
        item.Speed = Speed;
        item.Spawn = Spawn;
        bool success = await ItemsDB.UpdateItem(item);
        NavManager.NavigateTo("/");
    }
}